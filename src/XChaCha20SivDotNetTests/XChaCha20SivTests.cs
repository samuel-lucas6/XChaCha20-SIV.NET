using XChaCha20SivDotNet;
using System.Security.Cryptography;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace XChaCha20SivDotNetTests;

[TestClass]
public class XChaCha20SivTests
{
    public static IEnumerable<object[]> TestVectors()
    {
        yield return
        [
            "42ec5defa893132cb50e22c9a2d023d19582f7edd3839bd7953597fcf77c3a30717a909068728eb93c5810ea55fd77abcab9d9f7b431949c03ac1a7a793ec5f7aa64095effd113f85b9d9d5434d8d65b6efba70f4a35fa7aa001a2fb3a197c2dee29920fafa0e46cacf292f9a7a3d3c9cb518d1d906987c187bcbf9d9b9e155d2053dbcf9f5cb3e345e59d643079a0803b031d917b62c4c71356d69016735b0f1bd25a6b182cff88e806283342ffcfe6bc399a1cb7eb59be8097e3b4deb1afc2653c80ed9994caccfb52fa47402357df342e902251037ee9e0673816aad4e89965a97fcb2781be976bb58178c13836a6ffb137501427a98082964fab07f0408fc738ea6c1e84481ead417de61a246ce8ca082c22297e389f5d940ba28efef1e8ac5e64eeb1ebbcfa54fc3659d9b23b88274dd6952474262e8a377f463349b7fbaf39615fc2894985c2a842264fe2d019",
            "5468652064686f6c65202870726f6e6f756e6365642022646f6c65222920697320616c736f206b6e6f776e2061732074686520417369617469632077696c6420646f672c2072656420646f672c20616e642077686973746c696e6720646f672e2049742069732061626f7574207468652073697a65206f662061204765726d616e20736865706865726420627574206c6f6f6b73206d6f7265206c696b652061206c6f6e672d6c656767656420666f782e205468697320686967686c7920656c757369766520616e6420736b696c6c6564206a756d70657220697320636c6173736966696564207769746820776f6c7665732c20636f796f7465732c206a61636b616c732c20616e6420666f78657320696e20746865207461786f6e6f6d69632066616d696c792043616e696461652e",
            "404142434445464748494a4b4c4d4e4f5051525354555658",
            "808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f",
            "50515253c0c1c2c3c4c5c6c7"
        ];
        yield return
        [
            "b5e7b6ade048c53fc8a8a846e670a21552dae0b2a545bb12692a8b86b3197b94b19438947769af658c4a5bba75a9356f9eec96280bb6709889cfd0fb4212d17166eca183eb642c11c89e064327a616652a1a946aefd941af57ecc94c522de94cc83fd4f3cc0d00c62706cfea75ba315d0178944b0ec92921b4f35bc2abe23878e99c165c9258dae1ea7930e8e775e68262bffb867cbc3d3aab6ddc6a04479ef4968585763fc10430facec9ca583592f431c8f35d6e896887a1166d0cf4a506392eadfe1e94d5cd9c17106aca32aa6a7a90b501a097d1a118234200f57acc0fa073291edc0683f5988c775a1d2d20fed5eafd6faaea86d238b82969ca23097590bccb8561e2e583b44186757bc5d3b50fedb2520ac962e881bc0ed08ba17653419c4ad98ece8821ccae100b63c6555a5b4369f9079e2a01062324825d283366a0a2ae767a7b2da1d444c04b95417b1d6d",
            "5468652064686f6c65202870726f6e6f756e6365642022646f6c65222920697320616c736f206b6e6f776e2061732074686520417369617469632077696c6420646f672c2072656420646f672c20616e642077686973746c696e6720646f672e2049742069732061626f7574207468652073697a65206f662061204765726d616e20736865706865726420627574206c6f6f6b73206d6f7265206c696b652061206c6f6e672d6c656767656420666f782e205468697320686967686c7920656c757369766520616e6420736b696c6c6564206a756d70657220697320636c6173736966696564207769746820776f6c7665732c20636f796f7465732c206a61636b616c732c20616e6420666f78657320696e20746865207461786f6e6f6d69632066616d696c792043616e696461652e",
            "",
            "808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f",
            "50515253c0c1c2c3c4c5c6c7"
        ];
        yield return
        [
            "c4cb56526e98f2e49460d49422dc1b9533a3eb9d5e2dd2621df956ac6961ad362c7de2c36cd9bfa7f2589d35e5dfc1aae3ee8d4700bfafab7de26642fd2608420398c9c1705932f413868c4fd8aa595beb163fd98a2c3882c0672af77921a03188aab3eb60c837929d8910829f7a08df3d317d95c75cf81df2b77c3e0131f235e2112bbd05d2df54015595a2b5ccfa64a072026f6a6248faab42ad7f232796dd5676f899cc767bbf3741feaad3fc5c61190cf41be990197e1a2db8b9330cbe7423c074b759613016792148c2b549d9f2141f2077fbe8c7f1a616ca3f808d47b054804ad162c0c5f81c6b0a21d7ae8932f286864e6966bed94c5b0ec26e68c036d6834484e9e62510960d3ac62a7f5ef71a60ff7b3826f8fe20b56dace5a9dce3b82fc191edca6ac93fea6ff0dc2ce7edce09fbc01f2dde4cf781b4faa44c6007a3b6d5abfc3688a5d355a3322afc84c0",
            "5468652064686f6c65202870726f6e6f756e6365642022646f6c65222920697320616c736f206b6e6f776e2061732074686520417369617469632077696c6420646f672c2072656420646f672c20616e642077686973746c696e6720646f672e2049742069732061626f7574207468652073697a65206f662061204765726d616e20736865706865726420627574206c6f6f6b73206d6f7265206c696b652061206c6f6e672d6c656767656420666f782e205468697320686967686c7920656c757369766520616e6420736b696c6c6564206a756d70657220697320636c6173736966696564207769746820776f6c7665732c20636f796f7465732c206a61636b616c732c20616e6420666f78657320696e20746865207461786f6e6f6d69632066616d696c792043616e696461652e",
            "404142434445464748494a4b4c4d4e4f5051525354555658",
            "1c9240a5eb55d38af333888604f6b5f0473917c1402b80099dca5cbc207075c0",
            "50515253c0c1c2c3c4c5c6c7"
        ];
        yield return
        [
            "b60e788c9e78303de92f3f3734f741c00faf52f9972efcf5d2210b8283b24c93ea55ffdeb013fbc5e94b93ddbe65488ba111f8627b5f943b13d1bf19e90b704ec97932b4935955e5fc0cc6c65b8b66b9010a2fd155a8c415339ee86f568ac293304bd04c7d5b3a7a7124c020a6b5b5c0b96259ff3221afb1fb696d4a785dfb953f327e4185534e1ce4de021ebc1d0b91d1e3147e19ac7edcefd02717f62771b22c19eb646811381e20514bfe5243501aed5efc14fa20da836d7c3285f8cd5441bc529a25faf47f53846fe28a621f30df4ac3da2b2c22547d0dbfda1e20eaf021fb6afd41031f234f906368cd67dafb1b6883fa59316a422b1dc9fa22e2948a7798f792d2da9a9eebd3f9a5b259d1a97f9da5f05c6e61f51d0a211081b425d9718ef3f854edcaa19d1aa52470d6a19219ab9e841017be8800a54e2ba5137edd964d924e88281aa88705a02846c9d2eb0d",
            "5468652064686f6c65202870726f6e6f756e6365642022646f6c65222920697320616c736f206b6e6f776e2061732074686520417369617469632077696c6420646f672c2072656420646f672c20616e642077686973746c696e6720646f672e2049742069732061626f7574207468652073697a65206f662061204765726d616e20736865706865726420627574206c6f6f6b73206d6f7265206c696b652061206c6f6e672d6c656767656420666f782e205468697320686967686c7920656c757369766520616e6420736b696c6c6564206a756d70657220697320636c6173736966696564207769746820776f6c7665732c20636f796f7465732c206a61636b616c732c20616e6420666f78657320696e20746865207461786f6e6f6d69632066616d696c792043616e696461652e",
            "404142434445464748494a4b4c4d4e4f5051525354555658",
            "808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f",
            ""
        ];
        yield return
        [
            "14939489eca7ed290016b8be194552d2307d116b26089635a5189f75752e4640fddf43ef289fa2b82fdd3005595759d158f440fcb7b0932acb4227261fadf861e61550c83dc0960a4fe09bbd5b2e8e3aeaf6ea9a3719a33868a1c6d307a45363ce7d42ba029713557e499cdaff5f09643a1cdd254c37eaa61cd26a503c40299cb682bff3a9d7e3c844882dbcfac7ac6369837dd7c1d939fa1f4b83ed5a87c0e580e9a46bb8c8e04e3f695117fca2d0bdd30b62191466a91c05c475976e80027e91085d3dc60a152a34be4ffc02028265bbfb8d20429c574e2840beb5c1c4c23f7c7108900ae3a28cc8fa01881a179d09de7add325d71656c9aebf8c354d39929f925710693b48224bf0c631eb0d115d9b11c1b47e9a38674e43643a9d4244d2b0548ebf67e85595120cf089a50447b67923254684d24eebf908d03653ae1ca6a40426d84cabb8a22fb97210daa6174b9",
            "5468652064686f6c65202870726f6e6f756e6365642022646f6c65222920697320616c736f206b6e6f776e2061732074686520417369617469632077696c6420646f672c2072656420646f672c20616e642077686973746c696e6720646f672e2049742069732061626f7574207468652073697a65206f662061204765726d616e20736865706865726420627574206c6f6f6b73206d6f7265206c696b652061206c6f6e672d6c656767656420666f782e205468697320686967686c7920656c757369766520616e6420736b696c6c6564206a756d70657220697320636c6173736966696564207769746820776f6c7665732c20636f796f7465732c206a61636b616c732c20616e6420666f78657320696e20746865207461786f6e6f6d69632066616d696c792043616e696461652e",
            "",
            "808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f",
            ""
        ];
    }

    public static IEnumerable<object[]> InvalidParameterSizes()
    {
        yield return [XChaCha20Siv.TagSize, 1, XChaCha20Siv.NonceSize, XChaCha20Siv.KeySize, XChaCha20Siv.TagSize];
        yield return [XChaCha20Siv.TagSize, 0, XChaCha20Siv.NonceSize, XChaCha20Siv.KeySize + 1, XChaCha20Siv.TagSize];
        yield return [XChaCha20Siv.TagSize, 0, XChaCha20Siv.NonceSize, XChaCha20Siv.KeySize - 1, XChaCha20Siv.TagSize];
    }

    [TestMethod]
    [DynamicData(nameof(TestVectors), DynamicDataSourceType.Method)]
    public void Encrypt_Valid(string ciphertext, string plaintext, string nonce, string key, string associatedData)
    {
        Span<byte> c = stackalloc byte[ciphertext.Length / 2];
        Span<byte> p = Convert.FromHexString(plaintext);
        Span<byte> n = Convert.FromHexString(nonce);
        Span<byte> k = Convert.FromHexString(key);
        Span<byte> ad = Convert.FromHexString(associatedData);

        XChaCha20Siv.Encrypt(c, p, n, k, ad);

        Assert.AreEqual(ciphertext, Convert.ToHexString(c).ToLower());
    }

    [TestMethod]
    [DynamicData(nameof(InvalidParameterSizes), DynamicDataSourceType.Method)]
    public void Encrypt_Invalid(int ciphertextSize, int plaintextSize, int nonceSize, int keySize, int associatedDataSize)
    {
        var c = new byte[ciphertextSize];
        var p = new byte[plaintextSize];
        var n = new byte[nonceSize];
        var k = new byte[keySize];
        var ad = new byte[associatedDataSize];

        Assert.ThrowsException<ArgumentOutOfRangeException>(() => XChaCha20Siv.Encrypt(c, p, n, k, ad));
    }

    [TestMethod]
    [DynamicData(nameof(TestVectors), DynamicDataSourceType.Method)]
    public void Decrypt_Valid(string ciphertext, string plaintext, string nonce, string key, string associatedData)
    {
        Span<byte> p = stackalloc byte[plaintext.Length / 2];
        Span<byte> c = Convert.FromHexString(ciphertext);
        Span<byte> n = Convert.FromHexString(nonce);
        Span<byte> k = Convert.FromHexString(key);
        Span<byte> ad = Convert.FromHexString(associatedData);

        XChaCha20Siv.Decrypt(p, c, n, k, ad);

        Assert.AreEqual(plaintext, Convert.ToHexString(p).ToLower());
    }

    [TestMethod]
    [DynamicData(nameof(TestVectors), DynamicDataSourceType.Method)]
    public void Decrypt_Tampered(string ciphertext, string plaintext, string nonce, string key, string associatedData)
    {
        var p = new byte[plaintext.Length / 2];
        var parameters = new List<byte[]>
        {
            Convert.FromHexString(ciphertext),
            Convert.FromHexString(nonce),
            Convert.FromHexString(key),
            Convert.FromHexString(associatedData)
        };

        foreach (var param in parameters.Where(param => param.Length > 0)) {
            param[0]++;
            Assert.ThrowsException<CryptographicException>(() => XChaCha20Siv.Decrypt(p, parameters[0], parameters[1], parameters[2], parameters[3]));
            param[0]--;
        }
    }

    [TestMethod]
    [DynamicData(nameof(InvalidParameterSizes), DynamicDataSourceType.Method)]
    public void Decrypt_Invalid(int ciphertextSize, int plaintextSize, int nonceSize, int keySize, int associatedDataSize)
    {
        var p = new byte[plaintextSize];
        var c = new byte[ciphertextSize];
        var n = new byte[nonceSize];
        var k = new byte[keySize];
        var ad = new byte[associatedDataSize];

        Assert.ThrowsException<ArgumentOutOfRangeException>(() => XChaCha20Siv.Decrypt(p, c, n, k, ad));
    }
}
